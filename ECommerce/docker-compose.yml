services:
  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    ports:
     - "8000:8000"
    depends_on:
     - catalogdb
    environment:
     - ASPNETCORE_URLS=http://+:8000
     - DatabaseSettings__ConnectionString=mongodb://CatalogDB:27017
     - DatabaseSettings__DataBaseName=CatalogDB
     - DatabaseSettings__BrandsCollection=Brands
     - DatabaseSettings__TypesCollection=Types
     - DatabaseSettings__ProductsCollection=Products
     - ELASTICSEARCH_URL=http://elasticsearch:9200
  catalogdb:
    image: mongo
    container_name: catalogdb
    ports:
     - "27017:27017"
    volumes:
     - catalogdata:/data/db
  basketdb:
    image: redis:alpine
    container_name: basketdb
    restart: always
    ports:
     - "6379:6379"
  discountdb:
    image: postgres
    container_name: discountdb
    environment:
     - POSTGRES_USER=admin
     - POSTGRES_PASSWORD=Password@1
     - POSTGRES_DB=discountdatabase
    restart: always
    ports:
     - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
     test: ["CMD-SHELL","pg_isready -U admin -d discountdatabase"]
     interval: 10s
     timeout: 5s
     retries: 5
   
  orderdb:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: orderdb
    environment:
      ACCEPT_EULA : "Y"
      SA_PASSWORD : "Your_password123"
    restart: always
    ports :      
      - "14330:1433"
    volumes:
      - orderdb_data:/var/opt/mssql
    healthcheck:
     test: ["CMD-SHELL","/opt/mssql-tools/bin/sqlcmd -s localhost -U sa -P 'Your_password123' -Q 'select 1'"]
     interval: 10s
     timeout: 10s
     retries: 5
  

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
     - "5672:5672"
     - "15672:15672"

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
     - PGADMIN_DEFAULT_EMAIL=admin@ecommerce.com
     - PGADMIN_DEFAULT_PASSWORD=Password@1
    restart: always
    ports:
     - "5050:80"
    volumes:
     - pgadmin_data:/root/.pgadmin
  basket.api:
     image: ${DOCKER_REGISTRY-}basketapi
     build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
     ports:
     - "8001:8000"
     depends_on:
     - basketdb
     - rabbitmq 
     environment:
     - ASPNETCORE_URLS=http://+:8000
     - CacheSettings__ConnectionString=basketdb:6379
     - "GrpcSettings__DiscountUrl=http://discount.api:8080"
     - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672/" 
     - ELASTICSEARCH_URL=http://elasticsearch:9200
  portainer:
     image: portainer/portainer-ce
     container_name: portainer
     restart: always
     ports:
      - "8005:8000"
      - "9000:9000"
     volumes:
      - portainer_data:/data
  discount.api:
    image: ${DOCKER_REGISTRY-}discountapi
    build:
      context: .
      dockerfile: Services/Discount/Discount.API/Dockerfile
    container_name: discount.api
    environment:
     - ASPNETCORE_ENVIRONMENT=Development
     - "DatabaseSettings__ConnectionString=Server=discountdb;Port=5432;Database=discountdatabase;User Id=admin;Password=Password@1;"
     - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on: 
       discountdb:
         condition: service_healthy
    ports:
     - "8002:8000" 

  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
    environment:
     - ASPNETCORE_URLS=http://+:8080
     - ASPNETCORE_ENVIRONMENT=Development
     - "ConnectionStrings__OrderConnectionString=Server=orderdb;Database=OrderingDb;User Id=sa;Password=Your_password123;TrustServiceCertificate=True;"
     - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672" 
     - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
     - orderdb
     - rqbbitmq  
    ports:
       - "8003:8080"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"  

volumes:
  catalogdata:
  portainer_data:
  postgres_data:
  pgadmin_data:
  orderdb_data:
  elasticsearch-data:
     

